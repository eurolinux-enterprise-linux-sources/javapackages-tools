#!/usr/bin/python
# Copyright (c) 2013, Red Hat, Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
# 3. Neither the name of Red Hat nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors:  Michal Srb <msrb@redhat.com>

import sys
import os
import optparse

from javapackages.artifact import *
from javapackages.pom import *
from lxml.etree import Element, ElementTree, SubElement, Comment
from lxml import etree

class SaneParser(optparse.OptionParser):
    def format_epilog(self, formatter):
        return self.epilog

usage="usage: %prog [options] <MVN spec | POM path> [artifact path]"
epilog="""
MVN spec:
Specification of Maven artifact in following format:

    groupId:artifactId[:extension[:classifier]][:version]

Wildcards (*) and empty parts in specifications are allowed (treated as wildcard).
JAR path must also be specified if this option is used.

Examples of valid specifications:
commons-lang:commons-lang:1.2
commons-lang:commons-lang:war:
commons-lang:commons-lang:war:test-jar:
commons-lang:commons-lang:war:test-jar:3.1
*:commons-lang (equivalent to ':commons-lang')

POM path:
Path where POM file is located.

Artifact path:
Path where Artifact file (usually JAR) is located.
"""

config = ".xmvn-reactor"

class ExtensionsDontMatch(Exception):
    pass

if __name__ == "__main__":
    parser = SaneParser(usage=usage,
                        epilog=epilog)
    for index, arg in enumerate(sys.argv):
        sys.argv[index] = arg.decode(sys.getfilesystemencoding())

    (options, args) = parser.parse_args()
    if len(args) < 1:
        parser.error("At least 1 argument is required")

    try:
        orig = Artifact.from_mvn_str(args[0])
        orig.validate(allow_backref=False)
        if len(args) == 1:
            parser.error("When using artifact specification artifact path must be "
                    "provided")
    except (ArtifactFormatException):
        orig = POM(args[0])
        pom_path = args[0]
    else:
        pom_path = None

    jar_path = None
    if len(args) > 1:
        jar_path = args[1]
        extension = (os.path.splitext(jar_path)[1])[1:]
        if hasattr(orig, "extension") and orig.extension and orig.extension != extension:
            raise ExtensionsDontMatch("Extensions don't match: '%s' != '%s'" % (orig.extension, extension))
        else:
            orig.extension = extension
    else:
        orig.extension = "pom"

    if os.path.exists(config):
        parser = etree.XMLParser(remove_blank_text=True)
        root = etree.parse(config, parser).getroot()
    else:
        root = Element("reactorInstallationPlan")

    art = SubElement(root, "artifact")
    art.append(Comment("Generated by mvn_artifact"))
    SubElement(art, "groupId").text = orig.groupId
    SubElement(art, "artifactId").text = orig.artifactId
    if orig.extension != "jar":
        SubElement(art, "extension").text = orig.extension
    if hasattr(orig, "classifier") and orig.classifier:
        SubElement(art, "classifier").text = orig.classifier
    if orig.version:
        SubElement(art, "version").text = orig.version
    if jar_path:
        SubElement(art, "file").text = os.path.abspath(jar_path)
    if pom_path:
        SubElement(art, "rawPomPath").text = os.path.abspath(pom_path)

    with open(config, 'w') as f:
            f.write(tostring(root, pretty_print=True))

